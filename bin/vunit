#!/usr/bin/env python
import os
import re
import subprocess
import sys
from optparse import OptionParser
from xml.dom import minidom

WILD = re.compile(r'[*?]')
WILD_TO_RE = {'*': '.*', '?': '.'}
VIM_ARGS = [
    'vim',
    '-u', 'NONE',
    '-U', 'NONE',
    '--cmd', '"set nocp | sy on | filetype plugin indent on"',
]

def main():
  parser = OptionParser()
  parser.add_option('-d', '--todir', action='store', type='string', dest='todir')
  parser.add_option('-r', '--rtp', action='append', type='string', dest='rtp')
  parser.add_option('-p', '--plugin', action='append', type='string', dest='plugin')
  parser.add_option('-t', '--tests', action='append', type='string', dest='tests')
  (options, args) = parser.parse_args()

  if not options.todir:
    print 'abort: todir required'
    sys.exit(1)

  if not options.tests:
    print 'abort: tests required'
    sys.exit(1)

  basedir = os.path.dirname(os.path.dirname(
    os.path.abspath(os.path.realpath(sys.argv[0]))))

  if not os.path.isdir(options.todir):
    os.makedirs(options.todir)

  tests = []
  opt_tests = options.tests
  for opt_test in opt_tests:
    if os.path.isfile(opt_test):
      tests.append(opt_test)
    elif os.path.isdir(opt_test):
      os.path.walk(opt_test, add_test, tests)
    elif '*' in opt_test:
      walk_wild(opt_test, tests)
    else:
      print 'No such file or directory: %s' % opt_test

  failed = False
  for test in tests:
    print 'Running: %s' % test
    args = VIM_ARGS[:]
    args.extend(['--cmd', '"let g:VUnitOutputDir = \'%s\'"' % options.todir])
    args.extend(['--cmd', '"source %s"' % os.path.join(basedir, 'autoload/vunit.vim')])
    if options.rtp:
      args.extend(['--cmd', '"set rtp+=%s"' % ','.join(options.rtp).replace(' ', '\\ ')])
    if options.plugin:
      args.extend(['--cmd', '"runtime %s"' % ' '.join(options.plugin)])
    args.extend(['-c', '"silent! call vunit#TestRunner(\'.\', \'%s\')"' % test])

    # ncurses + Popen don't play well together, so run via sh or cmd.
    if os.name == 'nt':
      args.extend(['-c', '"qa!"'])
      args = 'cmd /c %s' % ' '.join(args)
    else:
      args.extend(['-c', "'qa!'"])
      args = ['sh', '-c', '%s > /dev/null 2>&1' % ' '.join(args), 'exit']

    vim = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if vim.wait() != 0:
      print 'Error: %s' % vim.communicate()[1].strip()

    result_file = re.sub(r'[/\\]', '.', test)
    result_file = re.sub(r'\.vim$', '', result_file)
    result_file = 'TEST-%s.xml' % result_file
    dom = minidom.parse(os.path.join(options.todir, result_file))
    root = dom.documentElement

    num = int(root.getAttribute('tests'))
    failures = int(root.getAttribute('failures'))
    time = root.getAttribute('time')
    name = root.getAttribute('name')

    print 'Tests run: %s, Failures: %s, Time elapsed: %s' % (num, failures, time)
    if failures > 0:
      print 'Test %s FAILED' % name
      failed = True

  raise SystemExit(failed)

def add_test(tests, dirname, names):
  for name in names:
    if name.endswith('.vim'):
        tests.append(os.path.join(dirname, name))

def walk_wild(path, tests):
  parts = []
  head, tail = os.path.split(path)
  while tail:
    parts.insert(0, tail)
    head, tail = os.path.split(head)
  if head:
    parts.insert(0, head)

  if not os.path.isdir(parts[0]):
    parts.insert(0, '.')

  walk_wild_part(parts[0], parts[1:], tests)

def walk_wild_part(dirpath, parts, tests):
  index = 0
  match = '^%s$' % WILD.sub(lambda m: WILD_TO_RE[m.group(0)], parts[0])
  match_end = '^%s$' % WILD.sub(lambda m: WILD_TO_RE[m.group(0)], parts[-1])
  for entry in sorted(os.listdir(dirpath), cmp_path(dirpath)):
    if re.match(match, entry):
      entry = os.path.join(dirpath, entry)
      if os.path.isfile(entry) and re.match(match_end, entry):
        tests.append(entry)
      if os.path.isdir(entry) and (index + 1) < len(parts):
        walk_wild_part(entry, parts[1:], tests)

def cmp_path(dirpath):
  ''' sort files before dirs '''
  def _cmp_path(p1, p2):
    p1 = os.path.join(dirpath, p1)
    p2 = os.path.join(dirpath, p2)
    diff = os.path.isfile(p1) - os.path.isfile(p2)
    if not diff:
      return cmp(p1, p2)
    return -diff
  return _cmp_path

if __name__ == '__main__':
  if sys.platform == 'cygwin':
    print 'Sorry, but cygwin is not currently supported.'
    sys.exit(1)
  main()
